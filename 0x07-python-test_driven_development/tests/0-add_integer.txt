``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Importing the module:
    >>> add_integer= __import__('0-add_integer').add_integer
  
Checking int addition:
    >>> add_integer(4, 5)
    9

Checking negative int addition:
    >>> add_integer(-4, 7)
    3

Checking addition float and float:
    >>> add_integer(2.3, 5.009)
    7

Checking addition over multiple values:
    >>> [add_integer(i, i ** 2) for i in range(6)]
    [0, 2, 6, 12, 20, 30]

Checking float and int:
    >>> add_integer(2.1, 4)
    6

Checking int and float:
    >>> add_integer(5, 7.8)
    12

Checking for passed NaN:
    >>> add_integer(1, float('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Checking for passed inf:
    >>> add_integer(1, float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Checking super long int:
    >>> add_integer(999999999999999999999999999999, 1)
    1000000000000000000000000000000

Checking non-number with number:
	>>> add_integer([1], 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Checking number with non-number:
    >>> add_integer(3, "2")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Checking non-number with non-number:
    >>> add_integer((2,), {"key": "value"})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Checking bool with number:
    >>> add_integer(True, 1)
    2

Checking number with bool:
    >>> add_integer(0, False)
    0

Checking no args:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Checking one arg:
    >>> add_integer(1)
    99

Checking more than 2 args:
    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
